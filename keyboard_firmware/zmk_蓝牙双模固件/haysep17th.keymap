/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define DEFAULT 0
#define LOWER   1

/ {
	keymap0: keymap {
		compatible = "zmk,keymap";

		default_layer {
// -----------------------------------------------------------------------------------------------------
// | ESC |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  0  |  -  |  =  |   BKSP   |   DEL    |
// | TAB  |  Q  |  W  |  E  |  R  |  T  |  Y  |  U  |  I  |  O  |  P  |  [  |  ]  |   "|"   |  PGUP    |
// | CAPS  |  A  |  S  |  D  |  F  |  G  |  H  |  J  |  K  |  L  |  ;  |  '  |     ENTER    |  PGDN    |
// |  SHIFT  |  Z  |  X  |  C  |  V  |  B  |  N  |  M  |  ,  |  .  |  /  |   SHIFT   |   UP   |  WIN   |
// |  CTL  |  fn  |  ALT  |    SPACE                SPACE    |  ALT  |  CTL  |  LEFT |  DOWN  | RIGHT  |
// -----------------------------------------------------------------------------------------------------
			bindings = <
	&kp ESC   &kp F1   &kp F2  &kp F3  &kp F4    &kp F5   &kp F6   &kp F7    &kp F8    &kp F9   &kp F10   &kp F11   &kp F12    &kp DEL   &kp INS   &kp PG_UP        &kp PG_DN 
	&kp GRAVE &kp N1   &kp N2  &kp N3  &kp N4    &kp N5   &kp N6   &kp N7    &kp N8    &kp N9   &kp N0    &kp MINUS &kp EQUAL  &kp BSPC  &kp HOME  &kp KP_NUM       &kp KP_SLASH
    &kp TAB   &kp Q    &kp W   &kp E   &kp R     &kp T    &kp Y    &kp U     &kp I     &kp O    &kp P     &kp LBKT  &kp RBKT   &kp BSLH  &kp END   &kp KP_MULTIPLY  &kp KP_MINUS
	&kp CLCK  &kp A    &kp S   &kp D   &kp F     &kp G    &kp H    &kp J     &kp K     &kp L    &kp SEMI  &kp SQT   &kp RET    &mo LOWER &kp KP_N7 &kp KP_N8        &kp KP_N9
	&kp LSHFT &kp Z    &kp X   &kp C   &kp V     &kp B    &kp N    &kp M     &kp COMMA &kp DOT  &kp FSLH  &kp RSHFT &kp UP     &kp KP_N4 &kp KP_N5 &kp KP_N6        &kp KP_PLUS
	&kp LCTRL &kp LALT &kp LGUI        &kp SPACE &kp RGUI &kp RALT &kp RCTRL &kp LEFT  &kp DOWN &kp RIGHT &kp KP_N0 &kp KP_DOT &kp KP_N1 &kp KP_N2 &kp KP_N3        &kp KP_ENTER
			>;
		};

		lower {
// ------------------------------------------------------------------------------------------------------
// | ~   |  F1 |  F2 |  F3 |  F4 |  F5 |  F6 |  F7 |  F8 |  F9 | F10 |  F11 |  F12 |  BT_CLR   |  BOOT  |
// | TAB | BT1 |  BT2 |  BT3 |  R  |  T  |  Y  |  U  |  INS  |  O  |  PB  |  [  |  ]  |   "|"  |  VOLUP |
// | CAPS  |  A  |  SLCK  |  D  |  F  |  G  | HOME|  J  |  K  |  L  |  ;  |  '  |     ENTER    |  VOLDN |
// |  SHIFT  |  Z  |  X  |  C  |  V  |  B  |  END |  M  |  ,  |  .  |  /  |   SHIFT   |   UP   |  WIN   |
// |  CTL  |  fn  |  ALT  |            trans USB/BT          |  ALT  |  CTL  |  LEFT  |  DOWN  | RIGHT  |
// ------------------------------------------------------------------------------------------------------
			bindings = <
	&bootloader &kp C_BRI_UP    &kp C_BRI_UP    &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS &trans          &trans &trans &kp C_PREV &kp C_PP &kp C_NEXT &kp C_MUTE &kp C_VOL_UP &kp C_VOL_UP &kp C_VOICE_COMMAND &trans &trans &trans 
	&bt BT_CLR  &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2                      &trans          &trans &trans &trans     &trans   &trans     &trans     &trans       &trans       &rgb_ug RGB_TOG     &trans &trans &trans
    &trans      &trans          &trans          &trans                            &trans          &trans &trans &trans     &trans   &trans     &trans     &trans       &trans       &trans              &trans &trans &trans    
	&trans      &rgb_ug RGB_SPI &rgb_ug RGB_SPD &rgb_ug RGB_BRI                   &rgb_ug RGB_BRD &trans &trans &trans     &trans   &trans     &trans     &trans       &trans       &trans              &trans &trans &trans  
	&trans      &rgb_ug RGB_HUI &rgb_ug RGB_HUD &rgb_ug RGB_SAI                   &rgb_ug RGB_SAD &trans &trans &trans     &trans   &trans     &trans     &trans       &trans       &trans              &trans &trans &trans
	&trans      &trans          &trans                                            &out OUT_TOG    &trans &trans &trans     &trans   &trans     &trans     &trans       &trans       &trans              &trans &trans &trans
	
			>;	
		};
	};
};
